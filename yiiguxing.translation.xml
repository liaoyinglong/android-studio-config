<application>
  <component name="AppStorage">
    <histories>
      <item value="// This is the theme of your application. // // Try running your application with &quot;flutter run&quot;. You'll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;, // or simply save your changes to &quot;hot reload&quot; in a Flutter IDE). // Notice that the counter didn't reset back to zero; the application // is not restarted." />
      <item value="Unable to dispatch touch to JS as the catalyst instance has not been attached" />
      <item value="leading" />
      <item value="Sliver Child List Delegate" />
      <item value="// Annotation class marking the version where SDK API was added. /// /// A `Since` annotation can be applied to a library declaration, /// any public declaration in a library, or in a class, or to /// an optional parameter. /// /// It signifies that the export, member or parameter was *added* in /// that version. /// /// When applied to a library declaration, it also a applies to /// all members declared or exported by that library. /// If applied to a class, it also applies to all members and constructors /// of that class. /// If applied to a class method, or parameter of such, /// any method implementing that interface method is also annotated. /// I multiple `Since` annotations apply to the same declaration or /// parameter, the latest version takes precendence. /// /// Any use of a marked API may trigger a warning if the using code /// does not require an SDK version guaranteeing that the API is available, /// unless the API feature is also provided by something else. /// It is only a problem if an annotated feature is used, and the annotated /// API is the *only* thing providing the functionality. /// For example, using `Future` exported by `dart:core` is not a problem /// if the same library also imports `dart:async`, and using an optional /// parameter on an interface is not a problem if the same type also /// implements another interface providing the same parameter. /// /// The version must be a semantic version (like `1.4.2` or `0.9.4-rec.4`), /// or the first two numbers of a semantic version (like `1.0` or `2.2`), /// representing a stable release, and equivalent to the semantic version /// you get by appending a `.0`." />
      <item value="// Copyright (c) 2013, the Dart project authors. Please see the AUTHORS file // for details. All rights reserved. Use of this source code is governed by a // BSD-style license that can be found in the LICENSE file." />
      <item value="/// This method must not be called after [dispose] has been called. /// /// Surprising behavior can result when reentrantly removing a listener (i.e. /// in response to a notification) that has been registered multiple times. /// See the discussion at [removeListener]." />
      <item value="/// Call all the registered listeners. /// /// Call this method whenever the object changes, to notify any clients the /// object may have. Listeners that are added during this iteration will not /// be visited. Listeners that are removed during this iteration will not be /// visited after they are removed." />
      <item value="is Row Count Approximate" />
      <item value="The following assertion was thrown while handling a gesture: I/flutter ( 3931): Scaffold.of() called with a context that does not contain a Scaffold. I/flutter ( 3931): No Scaffold ancestor could be found starting from the context that was passed to Scaffold.of(). This" />
      <item value="barrier Dismissible" />
      <item value="/** * Returns a new lazy [Iterable] with elements that are created by * calling `f` on each element of this `Iterable` in iteration order. * * This method returns a view of the mapped elements. As long as the * returned [Iterable] is not iterated over, the supplied function [f] will * not be invoked. The transformed elements will not be cached. Iterating * multiple times over the returned [Iterable] will invoke the supplied * function [f] multiple times on the same element. * * Methods on the returned iterable are allowed to omit calling `f` * on any element where the result isn't needed. * For example, [elementAt] may call `f` only once. */" />
      <item value="Flat" />
      <item value="material components" />
      <item value="obscure Text" />
      <item value="accent Color" />
      <item value="Ink Well" />
      <item value="minimum" />
      <item value="extent" />
      <item value="Sliver Demo" />
      <item value="Edge Insets Geometry" />
      <item value="/// The [initialPage], [keepPage], and [viewportFraction] arguments must not be null." />
      <item value="/// Creates a scrollable list that works page by page from an explicit [List] /// of widgets. /// /// This constructor is appropriate for page views with a small number of /// children because constructing the [List] requires doing work for every /// child that could possibly be displayed in the page view, instead of just /// those children that are actually visible." />
      <item value="/// The total number of tabs. /// /// Typically greater than one. Must match [TabBar.tabs]'s and /// [TabBarView.children]'s length." />
      <item value="/// Creates a default tab controller for the given [child] widget. /// /// The [length] argument is typically greater than one. The [length] must /// match [TabBar.tabs]'s and [TabBarView.children]'s length. /// /// The [initialIndex] argument must not be null." />
      <item value="/// The style of line to draw for a [BorderSide] in a [Border]." />
      <item value="// if you add more, think about how they will lerp" />
      <item value="/// Skip the border." />
      <item value="List Tile" />
      <item value="unselected Label Color" />
      <item value="Scaffold" />
      <item value="The following assertion was thrown building Text(&quot;hello1&quot;, inherit: true, color: MaterialColor(primary value: Color(0xfff44336))): No Directionality widget found." />
      <item value="lib/test.dart: Warning: Interpreting this as package URI, 'package:flutter_app01/test.dart'." />
      <item value="// The .fromEnvironment() constructors are special in that we do not want // users to call them using &quot;new&quot;. We prohibit that by giving them bodies // that throw, even though const constructors are not allowed to have bodies. // Disable those static errors. //ignore: const_constructor_with_body //ignore: const_factory" />
      <item value="Try using an US-ASCII letter, a digit, '_' (an underscore), or '$' (a dollar sign)." />
      <item value="lib/main.dart:1:1030: Error: The non-ASCII character '页' (U+9875) can't be used in identifiers, only in strings and comments." />
      <item value="The following RenderObject was being processed when the exception was fired: RenderCustomMultiChildLayoutBox#e1c6d NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE&#10;... needs compositing&#10;... parentData: &lt;none&gt; (can use size)&#10;... constraints: BoxConstraints(w=375.0, h=812.0)&#10;... size: Size(375.0, 812.0)" />
      <item value="User-created ancestor of the error-causing widget was:" />
      <item value="The _ScaffoldLayout custom multichild layout delegate forgot to lay out the following child:" />
      <item value="Raised Button" />
      <item value="_ScaffoldSlot.body: RenderPositionedBox#1f246 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE" />
      <item value="════════ Exception caught by rendering library ═════════════════════════════════════════════════════&#10;The following assertion was thrown during performLayout():&#10;The _ScaffoldLayout custom multichild layout delegate forgot to lay out the following child: _ScaffoldSlot.body: RenderPositionedBox#1f246 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE&#10;Each child must be laid out exactly once.&#10;User-created ancestor of the error-causing widget was:" />
      <item value="The following assertion was thrown building HomeContent(dirty):&#10;Cannot provide both a color and a decoration&#10;The color argument is just a shorthand for &quot;decoration: new BoxDecoration(color: color)&quot;.&#10;'package:flutter/src/widgets/container.dart':&#10;Failed assertion: line 317 pos 15: 'color == null || decoration == null'" />
      <item value="Either the assertion indicates an error in the framework itself, or we should provide substantially more information in this error message to help you determine and fix the underlying cause." />
      <item value="The color argument is just a shorthand for &quot;decoration: new BoxDecoration(color: color)&quot;." />
      <item value="The list of dirty elements at the end of the buildScope call was:" />
      <item value="RichText widgets require a Directionality widget ancestor.&#10;The specific widget that could not find a Directionality ancestor was: RichText(softWrap: wrapping at box width, maxLines: unlimited, text: &quot;你好 flutter&quot;)&#10;The ownership chain for the affected widget is: RichText ← Text ← Column ← Center ← MyApp ← [root]&#10;Typically, the Directionality widget is introduced by the MaterialApp or WidgetsApp widget at the top of your application widget tree. It determines the ambient reading direction and is used, for example, to determine how to lay out text, how to interpret &quot;start&quot; and &quot;end&quot; values, and to resolve EdgeInsetsDirectional, AlignmentDirectional, and other *Directional objects.&#10;User-created ancestor of the error-causing widget was:" />
      <item value="No Directionality widget found." />
      <item value="// Column is also a layout widget. It takes a list of children and // arranges them vertically. By default, it sizes itself to fit its // children horizontally, and tries to be as tall as its parent. // // Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the // &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android // Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code) // to see the wireframe for each widget. // // Column has various properties to control how it sizes itself and // how it positions its children. Here we use mainAxisAlignment to // center the children vertically; the main axis here is the vertical // axis because Columns are vertical (the cross axis would be // horizontal)." />
      <item value="/** * A hint to tools. * * Tools that work with Dart programs may accept hints to guide their behavior * as `pragma` annotations on declarations. * Each tool decides which hints it accepts, what they mean, and whether and * how they apply to sub-parts of the annotated entity. * * Tools that recognize pragma hints should pick a pragma prefix to identify * the tool. They should recognize any hint with a [name] starting with their * prefix followed by `:` as if it was intended for that tool. A hint with a * prefix for another tool should be ignored (unless compatibility with that * other tool is a goal). * * A tool may recognize unprefixed names as well, if they would recognize that * name with their own prefix in front. * * If the hint can be parameterized, an extra [options] object can be added as well. * * For example: * * ```dart * @pragma('Tool:pragma-name', [param1, param2, ...]) * class Foo { } * * @pragma('OtherTool:other-pragma') * void foo() { } * ``` * * Here class Foo is annotated with a Tool specific pragma 'pragma-name' and * function foo is annotated with a pragma 'other-pragma' specific to OtherTool. * */" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="52" />
        <entry key="ENGLISH" value="53" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>