<application>
  <component name="AppStorage">
    <histories>
      <item value="Scaffold" />
      <item value="The following assertion was thrown building Text(&quot;hello1&quot;, inherit: true, color: MaterialColor(primary value: Color(0xfff44336))): No Directionality widget found." />
      <item value="lib/test.dart: Warning: Interpreting this as package URI, 'package:flutter_app01/test.dart'." />
      <item value="// The .fromEnvironment() constructors are special in that we do not want // users to call them using &quot;new&quot;. We prohibit that by giving them bodies // that throw, even though const constructors are not allowed to have bodies. // Disable those static errors. //ignore: const_constructor_with_body //ignore: const_factory" />
      <item value="Try using an US-ASCII letter, a digit, '_' (an underscore), or '$' (a dollar sign)." />
      <item value="lib/main.dart:1:1030: Error: The non-ASCII character '页' (U+9875) can't be used in identifiers, only in strings and comments." />
      <item value="The following RenderObject was being processed when the exception was fired: RenderCustomMultiChildLayoutBox#e1c6d NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE&#10;... needs compositing&#10;... parentData: &lt;none&gt; (can use size)&#10;... constraints: BoxConstraints(w=375.0, h=812.0)&#10;... size: Size(375.0, 812.0)" />
      <item value="User-created ancestor of the error-causing widget was:" />
      <item value="The _ScaffoldLayout custom multichild layout delegate forgot to lay out the following child:" />
      <item value="Raised Button" />
      <item value="_ScaffoldSlot.body: RenderPositionedBox#1f246 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE" />
      <item value="════════ Exception caught by rendering library ═════════════════════════════════════════════════════&#10;The following assertion was thrown during performLayout():&#10;The _ScaffoldLayout custom multichild layout delegate forgot to lay out the following child: _ScaffoldSlot.body: RenderPositionedBox#1f246 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE&#10;Each child must be laid out exactly once.&#10;User-created ancestor of the error-causing widget was:" />
      <item value="The following assertion was thrown building HomeContent(dirty):&#10;Cannot provide both a color and a decoration&#10;The color argument is just a shorthand for &quot;decoration: new BoxDecoration(color: color)&quot;.&#10;'package:flutter/src/widgets/container.dart':&#10;Failed assertion: line 317 pos 15: 'color == null || decoration == null'" />
      <item value="Either the assertion indicates an error in the framework itself, or we should provide substantially more information in this error message to help you determine and fix the underlying cause." />
      <item value="The color argument is just a shorthand for &quot;decoration: new BoxDecoration(color: color)&quot;." />
      <item value="The list of dirty elements at the end of the buildScope call was:" />
      <item value="RichText widgets require a Directionality widget ancestor.&#10;The specific widget that could not find a Directionality ancestor was: RichText(softWrap: wrapping at box width, maxLines: unlimited, text: &quot;你好 flutter&quot;)&#10;The ownership chain for the affected widget is: RichText ← Text ← Column ← Center ← MyApp ← [root]&#10;Typically, the Directionality widget is introduced by the MaterialApp or WidgetsApp widget at the top of your application widget tree. It determines the ambient reading direction and is used, for example, to determine how to lay out text, how to interpret &quot;start&quot; and &quot;end&quot; values, and to resolve EdgeInsetsDirectional, AlignmentDirectional, and other *Directional objects.&#10;User-created ancestor of the error-causing widget was:" />
      <item value="No Directionality widget found." />
      <item value="// Column is also a layout widget. It takes a list of children and // arranges them vertically. By default, it sizes itself to fit its // children horizontally, and tries to be as tall as its parent. // // Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the // &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android // Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code) // to see the wireframe for each widget. // // Column has various properties to control how it sizes itself and // how it positions its children. Here we use mainAxisAlignment to // center the children vertically; the main axis here is the vertical // axis because Columns are vertical (the cross axis would be // horizontal)." />
      <item value="/** * A hint to tools. * * Tools that work with Dart programs may accept hints to guide their behavior * as `pragma` annotations on declarations. * Each tool decides which hints it accepts, what they mean, and whether and * how they apply to sub-parts of the annotated entity. * * Tools that recognize pragma hints should pick a pragma prefix to identify * the tool. They should recognize any hint with a [name] starting with their * prefix followed by `:` as if it was intended for that tool. A hint with a * prefix for another tool should be ignored (unless compatibility with that * other tool is a goal). * * A tool may recognize unprefixed names as well, if they would recognize that * name with their own prefix in front. * * If the hint can be parameterized, an extra [options] object can be added as well. * * For example: * * ```dart * @pragma('Tool:pragma-name', [param1, param2, ...]) * class Foo { } * * @pragma('OtherTool:other-pragma') * void foo() { } * ``` * * Here class Foo is annotated with a Tool specific pragma 'pragma-name' and * function foo is annotated with a pragma 'other-pragma' specific to OtherTool. * */" />
      <item value="/** * The annotation `@Deprecated('migration')` marks a feature as deprecated. * * The annotation [deprecated] is a shorthand for deprecating until * an unspecified &quot;next release&quot; without migration instructions. * * The intent of the `@Deprecated` annotation is to inform users of a feature * that they should change their code, even if it is currently still working * correctly. * * A deprecated feature is scheduled to be removed at a later time, possibly * specified in [message]. A deprecated feature should not be used, code using * it will break at some point in the future. If existing code is using the * feature it should be rewritten to not use the deprecated feature. * * A deprecated feature should document how the same effect can be achieved in * [message], so the programmer knows how to rewrite the code. * * The `@Deprecated` annotation applies to libraries, top-level declarations * (variables, getters, setters, functions, classes and typedefs), * class-level declarations (variables, getters, setters, methods, operators or * constructors, whether static or not), named optional arguments and * trailing optional positional parameters. * * Deprecation is transitive: * * - If a library is deprecated, so is every member of it. * - If a class is deprecated, so is every member of it. * - If a variable is deprecated, so are its implicit getter and setter. * * * A tool that processes Dart source code may report when: * * - the code imports a deprecated library. * - the code exports a deprecated library, or any deprecated member of *  a non-deprecated library. * - the code refers statically to a deprecated declaration. * - the code dynamically uses a member of an object with a statically known * type, where the member is deprecated on the static type of the object. * - the code dynamically calls a method with an argument where the * corresponding optional parameter is deprecated on the object's static type. * * * If the deprecated use is inside a library, class or method which is itself * deprecated, the tool should not bother the user about it. * A deprecated feature is expected to use other deprecated features. */" />
      <item value="Receiver" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="23" />
        <entry key="ENGLISH" value="24" />
      </map>
    </option>
  </component>
</application>